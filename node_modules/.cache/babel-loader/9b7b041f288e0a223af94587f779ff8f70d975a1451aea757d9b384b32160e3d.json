{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Darrien\\\\React-App-1\\\\src\\\\components\\\\Sidebar.jsx\",\n  _s = $RefreshSig$();\nimport { useState, useCallback } from \"react\";\n\n/**\r\n * Sidebar component that lets users:\r\n * - Add menu items to a list.\r\n * - Filter the list based on input.\r\n */\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Sidebar() {\n  _s();\n  // State to track the new menu item input\n  let [newMenuItem, setNewMenuItem] = useState(\"\");\n\n  // State to store the list of menu items\n  let [menuItems, setMenuItems] = useState([]);\n\n  // State to store the filter input\n  let [filter, setFilter] = useState(\"\");\n\n  /**\r\n   * Function to add a new menu item to the list.\r\n   * - It prevents adding empty items.\r\n   * - Clears the input after adding the item.\r\n   */\n  let addMenuItem = useCallback(() => {\n    if (newMenuItem.trim() !== \"\") {\n      setMenuItems([...menuItems, newMenuItem]); // Add the new item\n      setNewMenuItem(\"\"); // Clear the input field\n    }\n  }, [newMenuItem, menuItems]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      id: \"newMenuItemValue\",\n      value: newMenuItem,\n      onChange: event => setNewMenuItem(event.target.value),\n      placeholder: \"Enter menu item...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: addMenuItem,\n      children: \"Add Item\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      id: \"filter\",\n      type: \"text\",\n      value: filter,\n      onChange: event => setFilter(event.target.value),\n      placeholder: \"Filter menu items...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: menuItems.filter(item => item.toLowerCase().includes(filter.toLowerCase())) // Case-insensitive filtering\n      .map((item, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: item\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 13\n      }, this) // Render each menu item as a list item\n      )\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 31,\n    columnNumber: 5\n  }, this);\n}\n_s(Sidebar, \"5uIi/8KQac0M9JR+ZD3wfevND00=\");\n_c = Sidebar;\nvar _c;\n$RefreshReg$(_c, \"Sidebar\");","map":{"version":3,"names":["useState","useCallback","Sidebar","newMenuItem","setNewMenuItem","menuItems","setMenuItems","filter","setFilter","addMenuItem","trim","event","target","value","item","toLowerCase","includes","map","index"],"sources":["C:/Users/Darrien/React-App-1/src/components/Sidebar.jsx"],"sourcesContent":["import { useState, useCallback } from \"react\";\r\n\r\n/**\r\n * Sidebar component that lets users:\r\n * - Add menu items to a list.\r\n * - Filter the list based on input.\r\n */\r\nexport default function Sidebar() {\r\n  // State to track the new menu item input\r\n  let [newMenuItem, setNewMenuItem] = useState(\"\");\r\n\r\n  // State to store the list of menu items\r\n  let [menuItems, setMenuItems] = useState([]);\r\n\r\n  // State to store the filter input\r\n  let [filter, setFilter] = useState(\"\");\r\n\r\n  /**\r\n   * Function to add a new menu item to the list.\r\n   * - It prevents adding empty items.\r\n   * - Clears the input after adding the item.\r\n   */\r\n  let addMenuItem = useCallback(() => {\r\n    if (newMenuItem.trim() !== \"\") {\r\n      setMenuItems([...menuItems, newMenuItem]); // Add the new item\r\n      setNewMenuItem(\"\"); // Clear the input field\r\n    }\r\n  }, [newMenuItem, menuItems]);\r\n\r\n  return (\r\n    <div>\r\n      {/* Input field for adding a new menu item */}\r\n      <input\r\n        type=\"text\"\r\n        id=\"newMenuItemValue\"\r\n        value={newMenuItem}\r\n        onChange={(event) => setNewMenuItem(event.target.value)}\r\n        placeholder=\"Enter menu item...\"\r\n      />\r\n      <br />\r\n\r\n      {/* Button to add the menu item */}\r\n      <button onClick={addMenuItem}>Add Item</button>\r\n      <br />\r\n\r\n      {/* Input field for filtering menu items */}\r\n      <input\r\n        id=\"filter\"\r\n        type=\"text\"\r\n        value={filter}\r\n        onChange={(event) => setFilter(event.target.value)}\r\n        placeholder=\"Filter menu items...\"\r\n      />\r\n      <br />\r\n\r\n      {/* Display filtered menu items */}\r\n      <ul>\r\n        {menuItems\r\n          .filter((item) => item.toLowerCase().includes(filter.toLowerCase())) // Case-insensitive filtering\r\n          .map((item, index) => (\r\n            <li key={index}>{item}</li> // Render each menu item as a list item\r\n          ))}\r\n      </ul>\r\n    </div>\r\n  );\r\n}\r\n"],"mappings":";;AAAA,SAASA,QAAQ,EAAEC,WAAW,QAAQ,OAAO;;AAE7C;AACA;AACA;AACA;AACA;AAJA;AAKA,eAAe,SAASC,OAAO,GAAG;EAAA;EAChC;EACA,IAAI,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGJ,QAAQ,CAAC,EAAE,CAAC;;EAEhD;EACA,IAAI,CAACK,SAAS,EAAEC,YAAY,CAAC,GAAGN,QAAQ,CAAC,EAAE,CAAC;;EAE5C;EACA,IAAI,CAACO,MAAM,EAAEC,SAAS,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;;EAEtC;AACF;AACA;AACA;AACA;EACE,IAAIS,WAAW,GAAGR,WAAW,CAAC,MAAM;IAClC,IAAIE,WAAW,CAACO,IAAI,EAAE,KAAK,EAAE,EAAE;MAC7BJ,YAAY,CAAC,CAAC,GAAGD,SAAS,EAAEF,WAAW,CAAC,CAAC,CAAC,CAAC;MAC3CC,cAAc,CAAC,EAAE,CAAC,CAAC,CAAC;IACtB;EACF,CAAC,EAAE,CAACD,WAAW,EAAEE,SAAS,CAAC,CAAC;EAE5B,oBACE;IAAA,wBAEE;MACE,IAAI,EAAC,MAAM;MACX,EAAE,EAAC,kBAAkB;MACrB,KAAK,EAAEF,WAAY;MACnB,QAAQ,EAAGQ,KAAK,IAAKP,cAAc,CAACO,KAAK,CAACC,MAAM,CAACC,KAAK,CAAE;MACxD,WAAW,EAAC;IAAoB;MAAA;MAAA;MAAA;IAAA,QAChC,eACF;MAAA;MAAA;MAAA;IAAA,QAAM,eAGN;MAAQ,OAAO,EAAEJ,WAAY;MAAA,UAAC;IAAQ;MAAA;MAAA;MAAA;IAAA,QAAS,eAC/C;MAAA;MAAA;MAAA;IAAA,QAAM,eAGN;MACE,EAAE,EAAC,QAAQ;MACX,IAAI,EAAC,MAAM;MACX,KAAK,EAAEF,MAAO;MACd,QAAQ,EAAGI,KAAK,IAAKH,SAAS,CAACG,KAAK,CAACC,MAAM,CAACC,KAAK,CAAE;MACnD,WAAW,EAAC;IAAsB;MAAA;MAAA;MAAA;IAAA,QAClC,eACF;MAAA;MAAA;MAAA;IAAA,QAAM,eAGN;MAAA,UACGR,SAAS,CACPE,MAAM,CAAEO,IAAI,IAAKA,IAAI,CAACC,WAAW,EAAE,CAACC,QAAQ,CAACT,MAAM,CAACQ,WAAW,EAAE,CAAC,CAAC,CAAC;MAAA,CACpEE,GAAG,CAAC,CAACH,IAAI,EAAEI,KAAK,kBACf;QAAA,UAAiBJ;MAAI,GAAZI,KAAK;QAAA;QAAA;QAAA;MAAA,QAAa,CAAC;MAC7B;IAAC;MAAA;MAAA;MAAA;IAAA,QACD;EAAA;IAAA;IAAA;IAAA;EAAA,QACD;AAEV;AAAC,GA1DuBhB,OAAO;AAAA,KAAPA,OAAO;AAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}